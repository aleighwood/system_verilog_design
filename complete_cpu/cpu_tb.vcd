$date
	Wed Feb 14 15:38:37 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module cpu_tb $end
$var wire 8 ! cpu_out [7:0] $end
$var wire 8 " ALUResult [7:0] $end
$var reg 1 # CLK $end
$var reg 1 $ reset $end
$scope module dut $end
$var wire 1 # CLK $end
$var wire 1 $ reset $end
$var wire 1 % write_enable $end
$var wire 4 & opcode [3:0] $end
$var wire 24 ' instr [23:0] $end
$var wire 8 ( immediate [7:0] $end
$var wire 8 ) cpu_out [7:0] $end
$var wire 1 * Zero $end
$var wire 4 + WA [3:0] $end
$var wire 1 , RegWrite $end
$var wire 4 - RA2 [3:0] $end
$var wire 4 . RA1 [3:0] $end
$var wire 1 / Branch $end
$var wire 1 0 ALUSrc $end
$var wire 8 1 ALUResult [7:0] $end
$var wire 2 2 ALUControl [1:0] $end
$var reg 1 3 PCSrc $end
$scope module control_unit $end
$var wire 4 4 opcode [3:0] $end
$var reg 2 5 ALUControl [1:0] $end
$var reg 1 0 ALUSrc $end
$var reg 1 / Branch $end
$var reg 1 , RegWrite $end
$upscope $end
$scope module memory $end
$var wire 1 # CLK $end
$var wire 1 3 PCSrc $end
$var wire 8 6 immediate [7:0] $end
$var wire 24 7 instr [23:0] $end
$var wire 1 $ reset $end
$var reg 8 8 PC [7:0] $end
$upscope $end
$scope module register $end
$var wire 2 9 ALUControl [1:0] $end
$var wire 1 0 ALUSrc $end
$var wire 1 # CLK $end
$var wire 4 : RA1 [3:0] $end
$var wire 4 ; RA2 [3:0] $end
$var wire 4 < WA [3:0] $end
$var wire 8 = cpu_out [7:0] $end
$var wire 8 > immediate [7:0] $end
$var wire 1 % write_enable $end
$var wire 8 ? SrcB [7:0] $end
$var wire 8 @ RD2 [7:0] $end
$var wire 8 A RD1 [7:0] $end
$var reg 8 B ALUResult [7:0] $end
$var reg 1 * Zero $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 C i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 C
b1 B
b0 A
b0 @
b1 ?
b1 >
bx =
b1 <
b0 ;
b0 :
b10 9
b0 8
b11000010000000000000001 7
b1 6
b10 5
b110 4
03
b10 2
b1 1
10
0/
b0 .
b0 -
1,
b1 +
0*
bx )
b1 (
b11000010000000000000001 '
b110 &
1%
1$
1#
b1 "
bx !
$end
#20000
0$
#40000
0#
#60000
b100000 "
b100000 1
b100000 B
b100000 ?
b100000 (
b100000 6
b100000 >
b10 +
b10 <
b11000100000000000100000 '
b11000100000000000100000 7
b1 8
1#
#80000
0#
b1 C
#100000
1*
b0 "
b0 1
b0 B
b0 ?
b0 (
b0 6
b0 >
b1111 +
b1111 <
b11011110000000000000000 '
b11011110000000000000000 7
b10 8
1#
#120000
0#
b10 C
#140000
0*
b11100001 "
b11100001 1
b11100001 B
b100000 ?
b100000 @
b1 A
1/
b11 2
b11 5
b11 9
00
0%
0,
b111 (
b111 6
b111 >
b10 -
b10 ;
b1 .
b1 :
b0 +
b0 <
b111 &
b111 4
b0 !
b0 )
b0 =
b11100000001001000000111 '
b11100000001001000000111 7
b11 8
1#
#160000
0#
b11 C
#180000
b1 ?
b10 "
b10 1
b10 B
b1 @
0/
b10 2
b10 5
b10 9
1%
1,
b0 (
b0 6
b0 >
b1 -
b1 ;
b1 +
b1 <
b10 &
b10 4
b1000010001000100000000 '
b1000010001000100000000 7
b100 8
1#
#200000
0#
b100 C
#220000
b1 "
b1 1
b1 B
10
b0 A
b0 @
b1 (
b1 6
b1 >
b0 -
b0 ;
b1111 .
b1111 :
b1111 +
b1111 <
b110 &
b110 4
b11011111111000000000001 '
b11011111111000000000001 7
b101 8
1#
#240000
0#
b101 C
#260000
13
1*
b0 ?
1/
b11 2
b11 5
b11 9
00
0%
0,
b0 "
b0 1
b0 B
b11 (
b11 6
b11 >
b0 .
b0 :
b0 +
b0 <
b111 &
b111 4
b0 A
b11100000000000000000011 '
b11100000000000000000011 7
b110 8
b1 !
b1 )
b1 =
1#
#280000
0#
b110 C
#300000
03
b100000 ?
0*
b11100010 "
b11100010 1
b11100010 B
b100000 @
b10 A
b111 (
b111 6
b111 >
b10 -
b10 ;
b1 .
b1 :
b11100000001001000000111 '
b11100000001001000000111 7
b11 8
1#
#320000
0#
b111 C
#340000
b10 ?
b100 "
b100 1
b100 B
b10 @
0/
b10 2
b10 5
b10 9
1%
1,
b0 (
b0 6
b0 >
b1 -
b1 ;
b1 +
b1 <
b10 &
b10 4
b1000010001000100000000 '
b1000010001000100000000 7
b100 8
1#
#360000
b1000 C
