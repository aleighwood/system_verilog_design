$date
	Fri Feb 16 18:13:58 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module reg_file_tb $end
$var wire 8 ! cpu_out [7:0] $end
$var wire 8 " RD2 [7:0] $end
$var wire 8 # RD1 [7:0] $end
$var reg 8 $ ALUResult [7:0] $end
$var reg 1 % CLK $end
$var reg 4 & RA1 [3:0] $end
$var reg 4 ' RA2 [3:0] $end
$var reg 4 ( WA [3:0] $end
$var reg 1 ) write_enable $end
$scope module dut $end
$var wire 8 * ALUResult [7:0] $end
$var wire 1 % CLK $end
$var wire 4 + RA1 [3:0] $end
$var wire 4 , RA2 [3:0] $end
$var wire 4 - WA [3:0] $end
$var wire 8 . cpu_out [7:0] $end
$var wire 1 ) write_enable $end
$var wire 8 / RD2 [7:0] $end
$var wire 8 0 RD1 [7:0] $end
$upscope $end
$scope begin $ivl_for_loop0 $end
$var integer 32 1 i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 2 i [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 2
b0 1
bx 0
bx /
bx .
b0 -
bx ,
bx +
b0 *
1)
b0 (
bx '
bx &
1%
b0 $
bx #
bx "
bx !
$end
#20000
0)
0%
#40000
b101 $
b101 *
1)
1%
b1 (
b1 -
b1 1
#60000
0)
0%
#80000
b1010 $
b1010 *
1)
1%
b10 (
b10 -
b10 1
#100000
0)
0%
#120000
b1111 $
b1111 *
1)
1%
b11 (
b11 -
b11 1
#140000
0)
0%
#160000
b10100 $
b10100 *
1)
1%
b100 (
b100 -
b100 1
#180000
0)
0%
#200000
b11001 $
b11001 *
1)
1%
b101 (
b101 -
b101 1
#220000
0)
0%
#240000
b11110 $
b11110 *
1)
1%
b110 (
b110 -
b110 1
#260000
0)
0%
#280000
b100011 $
b100011 *
1)
1%
b111 (
b111 -
b111 1
#300000
0)
0%
#320000
b101000 $
b101000 *
1)
1%
b1000 (
b1000 -
b1000 1
#340000
0)
0%
#360000
b101101 $
b101101 *
1)
1%
b1001 (
b1001 -
b1001 1
#380000
0)
0%
#400000
b110010 $
b110010 *
1)
1%
b1010 (
b1010 -
b1010 1
#420000
0)
0%
#440000
b110111 $
b110111 *
1)
1%
b1011 (
b1011 -
b1011 1
#460000
0)
0%
#480000
b111100 $
b111100 *
1)
1%
b1100 (
b1100 -
b1100 1
#500000
0)
0%
#520000
b1000001 $
b1000001 *
1)
1%
b1101 (
b1101 -
b1101 1
#540000
0)
0%
#560000
b1000110 $
b1000110 *
1)
1%
b1110 (
b1110 -
b1110 1
#580000
0)
0%
#600000
b1001011 !
b1001011 .
b1001011 $
b1001011 *
1)
1%
b1111 (
b1111 -
b1111 1
#620000
0)
0%
#640000
b0 "
b0 /
b0 #
b0 0
b0 '
b0 ,
b0 &
b0 +
b10000 1
#680000
b101 "
b101 /
b101 #
b101 0
b1 '
b1 ,
b1 &
b1 +
b1 2
#720000
b1010 "
b1010 /
b1010 #
b1010 0
b10 '
b10 ,
b10 &
b10 +
b10 2
#760000
b1111 "
b1111 /
b1111 #
b1111 0
b11 '
b11 ,
b11 &
b11 +
b11 2
#800000
b10100 "
b10100 /
b10100 #
b10100 0
b100 '
b100 ,
b100 &
b100 +
b100 2
#840000
b11001 "
b11001 /
b11001 #
b11001 0
b101 '
b101 ,
b101 &
b101 +
b101 2
#880000
b11110 "
b11110 /
b11110 #
b11110 0
b110 '
b110 ,
b110 &
b110 +
b110 2
#920000
b100011 "
b100011 /
b100011 #
b100011 0
b111 '
b111 ,
b111 &
b111 +
b111 2
#960000
b101000 "
b101000 /
b101000 #
b101000 0
b1000 '
b1000 ,
b1000 &
b1000 +
b1000 2
#1000000
b101101 "
b101101 /
b101101 #
b101101 0
b1001 '
b1001 ,
b1001 &
b1001 +
b1001 2
#1040000
b110010 "
b110010 /
b110010 #
b110010 0
b1010 '
b1010 ,
b1010 &
b1010 +
b1010 2
#1080000
b110111 "
b110111 /
b110111 #
b110111 0
b1011 '
b1011 ,
b1011 &
b1011 +
b1011 2
#1120000
b111100 "
b111100 /
b111100 #
b111100 0
b1100 '
b1100 ,
b1100 &
b1100 +
b1100 2
#1160000
b1000001 "
b1000001 /
b1000001 #
b1000001 0
b1101 '
b1101 ,
b1101 &
b1101 +
b1101 2
#1200000
b1000110 "
b1000110 /
b1000110 #
b1000110 0
b1110 '
b1110 ,
b1110 &
b1110 +
b1110 2
#1240000
b1001011 "
b1001011 /
b1001011 #
b1001011 0
b1111 '
b1111 ,
b1111 &
b1111 +
b1111 2
#1280000
b10000 2
